/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Root */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Health Check */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/kakao/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kakao Oauth Callback
         * @description 카카오 OAuth 콜백 처리 - 통합 처리
         */
        get: operations["kakao_oauth_callback_api_auth_kakao_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/kakao": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Kakao Login
         * @description 카카오 OAuth 로그인 (API 엔드포인트)
         *
         *     1. 인가 코드로 액세스 토큰 받기
         *     2. 액세스 토큰으로 사용자 정보 받기
         *     3. 카카오 계정 검증
         *     4. 사용자 생성 또는 기존 사용자 반환
         *     5. JWT 토큰 발급
         */
        post: operations["kakao_login_api_auth_kakao_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/kakao/url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Kakao Login Url
         * @description 카카오 로그인 URL 생성
         */
        get: operations["get_kakao_login_url_api_auth_kakao_url_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description 현재 로그인한 사용자 정보 조회
         */
        get: operations["get_current_user_info_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User Profile
         * @description 사용자 프로필 정보 수정
         */
        put: operations["update_user_profile_api_auth_profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description 로그아웃 (클라이언트에서 토큰 삭제)
         */
        post: operations["logout_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Verify Token
         * @description 토큰 유효성 검증
         */
        get: operations["verify_token_api_auth_verify_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Profile
         * @description 현재 사용자 프로필 조회
         */
        get: operations["get_my_profile_api_profile_me_get"];
        /**
         * Update My Profile
         * @description 사용자 프로필 수정
         */
        put: operations["update_my_profile_api_profile_me_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profile/me/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Profile Image
         * @description 프로필 이미지 업로드
         */
        post: operations["upload_profile_image_api_profile_me_avatar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/family/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup Family Group
         * @description 가족 그룹 초기 설정 (새 사용자용)
         *     1) 기존 멤버십 확인
         *     2) 그룹 생성
         *     3) 받는 분 생성
         *     4) 첫 회차 생성
         *     5) 리더 멤버 추가
         */
        post: operations["setup_family_group_api_family_setup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/family/recipient": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Recipient
         * @description 현재 사용자가 속한 그룹의 받는 분 정보 조회
         */
        get: operations["get_my_recipient_api_family_recipient_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/family/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Family Group
         * @description 가족 그룹 생성 (리더만 가능)
         */
        post: operations["create_family_group_api_family_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/family/my-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Family Group
         * @description 현재 사용자가 속한 가족 그룹 조회
         */
        get: operations["get_my_family_group_api_family_my_group_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/family/{group_id}/regenerate-invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate Invite Code
         * @description 초대 코드 재생성 (리더만 가능)
         */
        post: operations["regenerate_invite_code_api_family__group_id__regenerate_invite_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join Family Group
         * @description 초대 코드로 가족 그룹 가입
         *
         *     1. 초대 코드 유효성 확인
         *     2. 사용자의 기존 멤버십 확인
         *     3. 그룹 멤버 수 제한 확인 (최대 20명)
         *     4. 멤버로 추가
         */
        post: operations["join_family_group_api_members_join_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/validate-invite/{invite_code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate Invite Code
         * @description 초대 코드 유효성 검증
         */
        get: operations["validate_invite_code_api_members_validate_invite__invite_code__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/my-group/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Group Members
         * @description 현재 사용자가 속한 그룹의 멤버 목록 조회
         */
        get: operations["get_my_group_members_api_members_my_group_members_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Member
         * @description 멤버 제거 (리더만 가능, 본인 제거 불가)
         */
        delete: operations["remove_member_api_members__member_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Posts
         * @description 현재 회차의 소식 목록 조회
         */
        get: operations["get_current_posts_api_posts__get"];
        put?: never;
        /**
         * Create Post
         * @description 소식 작성 - Azure Blob Storage 사용
         */
        post: operations["create_post_api_posts__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/with-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Post With Images
         * @description 이미지와 함께 소식 작성 - 블롭 키 저장
         */
        post: operations["create_post_with_images_api_posts_with_images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/upload-images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Post Images
         * @description 소식 작성용 이미지 업로드 - Azure Blob Storage 사용
         */
        post: operations["upload_post_images_api_posts_upload_images_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/posts/{post_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Post
         * @description 소식 삭제
         */
        delete: operations["delete_post_api_posts__post_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/issues/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current Issue For Group
         * @description 현재 사용자가 속한 그룹의 '진행 중'인 회차 정보를 조회합니다 - 안전한 버전
         */
        get: operations["get_current_issue_for_group_api_issues_current_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/issues/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create New Issue
         * @description 새 회차 생성 (리더만 가능)
         */
        post: operations["create_new_issue_api_issues_create_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/issues/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Group Issues
         * @description 그룹의 모든 회차 목록 조회
         */
        get: operations["get_group_issues_api_issues__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Books
         * @description 내가 속한 그룹의 책자 목록 조회
         */
        get: operations["get_my_books_api_books__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/{book_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Book Detail
         * @description 책자 상세 정보 조회
         */
        get: operations["get_book_detail_api_books__book_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/{book_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Book Pdf
         * @description 책자 PDF 다운로드 (SAS URL 리다이렉트)
         */
        get: operations["download_book_pdf_api_books__book_id__download_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/books/{book_id}/regenerate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate Book Pdf
         * @description 책자 PDF 재생성 (관리자 또는 그룹 리더만 가능)
         */
        post: operations["regenerate_book_pdf_api_books__book_id__regenerate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/payment/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ready Payment */
        post: operations["ready_payment_api_subscription_payment_ready_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Approve Payment
         * @description 결제 승인 - 카카오페이에서 리다이렉트 후 처리
         *
         *     1. pg_token과 tid로 결제 승인
         *     2. 구독 정보 DB 저장
         *     3. 결제 내역 DB 저장
         *     4. 성공 페이지로 리다이렉트
         */
        get: operations["approve_payment_api_subscription_approve_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Cancel Payment
         * @description 결제 취소 - 사용자가 결제창에서 취소
         */
        get: operations["cancel_payment_api_subscription_cancel_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fail Payment
         * @description 결제 실패
         */
        get: operations["fail_payment_api_subscription_fail_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Subscriptions
         * @description 내 구독 목록 조회
         */
        get: operations["get_my_subscriptions_api_subscription_my_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/{subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Subscription Detail
         * @description 구독 상세 정보
         */
        get: operations["get_subscription_detail_api_subscription__subscription_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscription/{subscription_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Subscription
         * @description 구독 취소 (환불)
         */
        post: operations["cancel_subscription_api_subscription__subscription_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Family Groups
         * @description 모든 가족 그룹 목록 조회 (관리자용) - N+1 최적화
         */
        get: operations["get_all_family_groups_api_admin_groups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/groups/{group_id}/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Group Feed
         * @description 특정 그룹의 피드 조회 (관리자용)
         */
        get: operations["get_group_feed_api_admin_groups__group_id__feed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/books/generate/{issue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Book Pdf
         * @description 회차의 책자 PDF 생성 (관리자용)
         */
        post: operations["generate_book_pdf_api_admin_books_generate__issue_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/books/pending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Pending Books
         * @description 제작/배송 대기 중인 책자 목록 (관리자용)
         */
        get: operations["get_pending_books_api_admin_books_pending_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/books/{book_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Book Status
         * @description 책자 상태 업데이트 (관리자용)
         */
        put: operations["update_book_status_api_admin_books__book_id__status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** Body_upload_post_images_api_posts_upload_images_post */
        Body_upload_post_images_api_posts_upload_images_post: {
            /** Files */
            files: string[];
        };
        /** Body_upload_profile_image_api_profile_me_avatar_post */
        Body_upload_profile_image_api_profile_me_avatar_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** BookResponse */
        BookResponse: {
            /** Id */
            id: string;
            /** Issue Id */
            issue_id: string;
            /** Pdf Url */
            pdf_url?: string | null;
            production_status: components["schemas"]["ProductionStatusEnum"];
            delivery_status: components["schemas"]["DeliveryStatusEnum"];
            /** Tracking Number */
            tracking_number?: string | null;
            /** Produced At */
            produced_at?: string | null;
            /** Shipped At */
            shipped_at?: string | null;
            /** Delivered At */
            delivered_at?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Issue Number */
            issue_number?: number | null;
            /** Issue Deadline */
            issue_deadline?: string | null;
            /** Post Count */
            post_count?: number | null;
        };
        /** BookStatusUpdate */
        BookStatusUpdate: {
            production_status?: components["schemas"]["ProductionStatusEnum"] | null;
            delivery_status?: components["schemas"]["DeliveryStatusEnum"] | null;
            /**
             * Tracking Number
             * @description 운송장 번호
             */
            tracking_number?: string | null;
            /**
             * Notes
             * @description 배송 메모
             */
            notes?: string | null;
        };
        /**
         * DeadlineTypeEnum
         * @enum {string}
         */
        DeadlineTypeEnum: "SECOND_SUNDAY" | "FOURTH_SUNDAY";
        /**
         * DeliveryStatusEnum
         * @enum {string}
         */
        DeliveryStatusEnum: "pending" | "shipping" | "delivered";
        /** FamilyGroupCreate */
        FamilyGroupCreate: {
            /**
             * Group Name
             * @description 가족 그룹명
             */
            group_name: string;
            /** @description 마감일 타입 */
            deadline_type: components["schemas"]["DeadlineTypeEnum"];
            /** @description 리더와 받는 분의 관계 */
            leader_relationship: components["schemas"]["RelationshipTypeEnum"];
            /** @description 받는 분 정보 */
            recipient_info: components["schemas"]["RecipientCreate"];
        };
        /** FamilyGroupResponse */
        FamilyGroupResponse: {
            /** Id */
            id: string;
            /** Group Name */
            group_name: string;
            /** Leader Id */
            leader_id: string;
            /** Invite Code */
            invite_code: string;
            deadline_type: components["schemas"]["DeadlineTypeEnum"];
            status: components["schemas"]["GroupStatusEnum"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * FamilyGroupSetup
         * @description 가족 그룹 초기 설정
         */
        FamilyGroupSetup: {
            /**
             * Group Name
             * @description 가족 그룹명
             */
            group_name: string;
            /**
             * Deadline Type
             * @description 마감일 타입 (SECOND_SUNDAY, FOURTH_SUNDAY)
             */
            deadline_type: string;
            /**
             * Leader Relationship
             * @description 리더와 받는 분의 관계
             */
            leader_relationship: string;
            /**
             * Recipient Name
             * @description 받는 분 이름
             */
            recipient_name: string;
            /**
             * Recipient Address
             * @description 받는 분 주소
             */
            recipient_address: string;
            /**
             * Recipient Address Detail
             * @description 받는 분 상세주소
             */
            recipient_address_detail?: string | null;
            /**
             * Recipient Postal Code
             * @description 우편번호
             */
            recipient_postal_code?: string | null;
            /**
             * Recipient Phone
             * @description 받는 분 전화번호
             */
            recipient_phone?: string | null;
        };
        /** FamilyMemberResponse */
        FamilyMemberResponse: {
            /** Id */
            id: string;
            /** Group Id */
            group_id: string;
            /** User Id */
            user_id: string;
            /** Recipient Id */
            recipient_id: string;
            member_relationship: components["schemas"]["RelationshipTypeEnum"];
            role: components["schemas"]["MemberRoleEnum"];
            /**
             * Joined At
             * Format: date-time
             */
            joined_at: string;
            /** User Name */
            user_name?: string | null;
            /** User Profile Image */
            user_profile_image?: string | null;
        };
        /**
         * GroupStatusEnum
         * @enum {string}
         */
        GroupStatusEnum: "ACTIVE" | "INACTIVE";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** KakaoLoginResponse */
        KakaoLoginResponse: {
            user: components["schemas"]["UserResponse"];
            /** Is New User */
            is_new_user: boolean;
            /** Access Token */
            access_token: string;
        };
        /** MemberJoinRequest */
        MemberJoinRequest: {
            /**
             * Invite Code
             * @description 초대 코드
             */
            invite_code: string;
            /** @description 받는 분과의 관계 */
            relationship: components["schemas"]["RelationshipTypeEnum"];
        };
        /**
         * MemberRoleEnum
         * @enum {string}
         */
        MemberRoleEnum: "LEADER" | "MEMBER";
        /**
         * PaymentReadyResponse
         * @description 결제 준비 응답
         */
        PaymentReadyResponse: {
            /**
             * Tid
             * @description 결제 고유번호
             */
            tid: string;
            /**
             * Next Redirect Pc Url
             * @description PC 결제 페이지 URL
             */
            next_redirect_pc_url: string;
            /**
             * Next Redirect Mobile Url
             * @description 모바일 결제 페이지 URL
             */
            next_redirect_mobile_url: string;
            /**
             * Partner Order Id
             * @description 가맹점 주문번호
             */
            partner_order_id: string;
        };
        /** PostCreate */
        PostCreate: {
            /**
             * Content
             * @description 소식 내용
             */
            content: string;
            /**
             * Image Urls
             * @description 이미지 URL 목록
             * @default []
             */
            image_urls: string[];
        };
        /** PostCreateWithImages */
        PostCreateWithImages: {
            /**
             * Content
             * @description 소식 내용
             */
            content: string;
            /**
             * Image Urls
             * @description 이미지 URL 목록
             * @default []
             */
            image_urls: string[];
            /**
             * Image Blob Keys
             * @description 이미지 블롭 키 목록
             * @default []
             */
            image_blob_keys: string[];
        };
        /** PostResponse */
        PostResponse: {
            /** Id */
            id: string;
            /** Issue Id */
            issue_id: string;
            /** Author Id */
            author_id: string;
            /** Content */
            content: string;
            /** Image Urls */
            image_urls: string[];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Author Name */
            author_name?: string | null;
            /** Author Relationship */
            author_relationship?: string | null;
            /** Author Profile Image */
            author_profile_image?: string | null;
        };
        /**
         * ProductionStatusEnum
         * @enum {string}
         */
        ProductionStatusEnum: "pending" | "in_progress" | "completed";
        /** RecipientCreate */
        RecipientCreate: {
            /**
             * Name
             * @description 받는 분 이름
             */
            name: string;
            /**
             * Birth Date
             * @description 생년월일
             */
            birth_date?: string | null;
            /**
             * Phone
             * @description 전화번호
             */
            phone?: string | null;
            /**
             * Address
             * @description 주소
             */
            address: string;
            /**
             * Address Detail
             * @description 상세주소
             */
            address_detail?: string | null;
            /**
             * Postal Code
             * @description 우편번호
             */
            postal_code: string;
            /**
             * Road Address
             * @description 도로명주소
             */
            road_address?: string | null;
            /**
             * Jibun Address
             * @description 지번주소
             */
            jibun_address?: string | null;
            /**
             * Address Type
             * @description 주소 타입 (ROAD/JIBUN)
             */
            address_type?: string | null;
            /**
             * Latitude
             * @description 위도
             */
            latitude?: number | null;
            /**
             * Longitude
             * @description 경도
             */
            longitude?: number | null;
            /**
             * Region 1Depth
             * @description 시/도
             */
            region_1depth?: string | null;
            /**
             * Region 2Depth
             * @description 구/군
             */
            region_2depth?: string | null;
            /**
             * Region 3Depth
             * @description 동/면
             */
            region_3depth?: string | null;
            /**
             * Profile Image Url
             * @description 프로필 이미지 URL
             */
            profile_image_url?: string | null;
            /**
             * Group Id
             * @description 가족 그룹 ID
             */
            group_id?: string | null;
        };
        /**
         * RelationshipTypeEnum
         * @enum {string}
         */
        RelationshipTypeEnum: "DAUGHTER" | "SON" | "DAUGHTER_IN_LAW" | "SON_IN_LAW";
        /** SocialLogin */
        SocialLogin: {
            /** Code */
            code: string;
        };
        /** SubscriptionResponse */
        SubscriptionResponse: {
            /** Id */
            id: string;
            /** Group Id */
            group_id: string;
            /** User Id */
            user_id: string;
            status: components["schemas"]["SubscriptionStatusEnum"];
            /**
             * Start Date
             * Format: date
             */
            start_date: string;
            /** End Date */
            end_date?: string | null;
            /**
             * Next Billing Date
             * Format: date
             */
            next_billing_date: string;
            /** Amount */
            amount: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * SubscriptionStatusEnum
         * @enum {string}
         */
        SubscriptionStatusEnum: "active" | "cancelled" | "expired" | "suspended";
        /**
         * UserProfileUpdate
         * @description 사용자 프로필 업데이트 전용 스키마
         */
        UserProfileUpdate: {
            /**
             * Name
             * @description 사용자 이름
             */
            name?: string | null;
            /**
             * Phone
             * @description 전화번호 (010-1234-5678 형식)
             */
            phone?: string | null;
            /**
             * Birth Date
             * @description 생년월일
             */
            birth_date?: string | null;
        };
        /** UserResponse */
        UserResponse: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Name */
            name: string;
            /** Phone */
            phone?: string | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Id */
            id: string;
            /** Profile Image Url */
            profile_image_url?: string | null;
            /** Kakao Id */
            kakao_id?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Name */
            name?: string | null;
            /** Phone */
            phone?: string | null;
            /** Birth Date */
            birth_date?: string | null;
            /** Profile Image Url */
            profile_image_url?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    kakao_oauth_callback_api_auth_kakao_callback_get: {
        parameters: {
            query?: {
                code?: string | null;
                token?: string | null;
                user_id?: string | null;
                state?: string | null;
                error?: string | null;
                error_description?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    kakao_login_api_auth_kakao_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SocialLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["KakaoLoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_kakao_login_url_api_auth_kakao_url_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_current_user_info_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    update_user_profile_api_auth_profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    verify_token_api_auth_verify_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_my_profile_api_profile_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    update_my_profile_api_profile_me_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_profile_image_api_profile_me_avatar_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_profile_image_api_profile_me_avatar_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    setup_family_group_api_family_setup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FamilyGroupSetup"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_recipient_api_family_recipient_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    create_family_group_api_family_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FamilyGroupCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FamilyGroupResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_family_group_api_family_my_group_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FamilyGroupResponse"];
                };
            };
        };
    };
    regenerate_invite_code_api_family__group_id__regenerate_invite_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    join_family_group_api_members_join_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberJoinRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FamilyMemberResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_invite_code_api_members_validate_invite__invite_code__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                invite_code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_group_members_api_members_my_group_members_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FamilyMemberResponse"][];
                };
            };
        };
    };
    remove_member_api_members__member_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_posts_api_posts__get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_post_api_posts__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_post_with_images_api_posts_with_images_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostCreateWithImages"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_post_images_api_posts_upload_images_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_post_images_api_posts_upload_images_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_post_api_posts__post_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                post_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_issue_for_group_api_issues_current_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    create_new_issue_api_issues_create_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group_issues_api_issues__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
        };
    };
    get_my_books_api_books__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookResponse"][];
                };
            };
        };
    };
    get_book_detail_api_books__book_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BookResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_book_pdf_api_books__book_id__download_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    regenerate_book_pdf_api_books__book_id__regenerate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    ready_payment_api_subscription_payment_ready_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaymentReadyResponse"];
                };
            };
        };
    };
    approve_payment_api_subscription_approve_get: {
        parameters: {
            query: {
                pg_token: string;
                /** @description 결제 고유번호 */
                tid: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_payment_api_subscription_cancel_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    fail_payment_api_subscription_fail_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_my_subscriptions_api_subscription_my_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponse"][];
                };
            };
        };
    };
    get_subscription_detail_api_subscription__subscription_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_subscription_api_subscription__subscription_id__cancel_post: {
        parameters: {
            query?: {
                reason?: string;
            };
            header?: never;
            path: {
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_family_groups_api_admin_groups_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_group_feed_api_admin_groups__group_id__feed_get: {
        parameters: {
            query?: {
                issue_id?: string | null;
            };
            header?: never;
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_book_pdf_api_admin_books_generate__issue_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issue_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_pending_books_api_admin_books_pending_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_book_status_api_admin_books__book_id__status_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                book_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BookStatusUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
